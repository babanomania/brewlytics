services:
  oltp-db:
    image: postgres:14
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${OLTP_DB}
    ports:
      - "5432:5432"
    volumes:
      - oltp-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  flyway-oltp:
    image: flyway/flyway
    command: -connectRetries=60 migrate
    volumes:
      - ./flyway/migrations/oltp:/flyway/sql
    env_file: .env
    environment:
      FLYWAY_URL: jdbc:postgresql://oltp-db:5432/${OLTP_DB}
      FLYWAY_USER: ${DB_USER}
      FLYWAY_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - oltp-db

  dbt-oltp:
    image: ghcr.io/dbt-labs/dbt-postgres:1.6.0
    volumes:
      - ./dbt:/dbt
    working_dir: /dbt
    env_file: .env
    environment:
      DBT_PROFILES_DIR: /dbt
      DBT_PROFILE: oltp
      DBT_TARGET: dev
    entrypoint: ["/bin/sh", "-c", "./dbt_oltp.sh"]
    depends_on:
      - flyway-oltp

  olap-db:
    image: postgres:14
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${OLAP_DB}
    ports:
      - "5433:5432"
    volumes:
      - olap-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  flyway-olap:
    image: flyway/flyway
    command: -connectRetries=60 migrate
    volumes:
      - ./flyway/migrations/olap:/flyway/sql
    env_file: .env
    environment:
      FLYWAY_URL: jdbc:postgresql://olap-db:5432/${OLAP_DB}
      FLYWAY_USER: ${DB_USER}
      FLYWAY_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - olap-db

  dbt-olap:
    image: ghcr.io/dbt-labs/dbt-postgres:1.6.0
    volumes:
      - ./dbt:/dbt
    working_dir: /dbt
    env_file: .env
    environment:
      DBT_PROFILES_DIR: /dbt
      DBT_PROFILE: olap
      DBT_TARGET: dev
    entrypoint: ["/bin/sh", "-c", "./dbt_olap.sh"]
    depends_on:
      - flyway-olap

  order-api:
    build: ./backend-api/order-api
    deploy:
      replicas: 3
    env_file: .env
    environment:
      OLTP_HOST: oltp-db
      OLTP_PORT: 5432
      OLTP_DB: ${OLTP_DB}
      OLTP_USER: ${DB_USER}
      OLTP_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - flyway-oltp

  product-api:
    build: ./backend-api/product-api
    env_file: .env
    environment:
      OLTP_HOST: oltp-db
      OLTP_PORT: 5432
      OLTP_DB: ${OLTP_DB}
      OLTP_USER: ${DB_USER}
      OLTP_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - flyway-oltp

  customer-api:
    build: ./backend-api/customer-api
    env_file: .env
    environment:
      OLTP_HOST: oltp-db
      OLTP_PORT: 5432
      OLTP_DB: ${OLTP_DB}
      OLTP_USER: ${DB_USER}
      OLTP_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - flyway-oltp

  employee-api:
    build: ./backend-api/employee-api
    env_file: .env
    environment:
      OLTP_HOST: oltp-db
      OLTP_PORT: 5432
      OLTP_DB: ${OLTP_DB}
      OLTP_USER: ${DB_USER}
      OLTP_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - flyway-oltp

  gateway:
    build: ./gateway
    depends_on:
      - order-api
      - product-api
      - customer-api
    ports:
      - "8000:80"

  airflow:
    image: apache/airflow:2.6.3
    env_file: .env
    environment:
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    volumes:
      - ./airflow-pipeline/dags:/opt/airflow/dags
      - airflow-data:/opt/airflow
    command: bash -c "airflow db init && airflow users create --username admin --password admin --firstname admin --lastname admin --role Admin --email admin@example.com && airflow scheduler & airflow webserver"
    ports:
      - "8080:8080"
    depends_on:
      - flyway-oltp
      - flyway-olap

  metabase-db:
    image: postgres:14
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${MB_DB}
    ports:
      - "5434:5432"
    volumes:
      - metabase-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  metabase:
    image: metabase/metabase
    env_file: .env
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MB_DB}
      MB_DB_PORT: 5432
      MB_DB_HOST: metabase-db
      MB_DB_USER: ${DB_USER}
      MB_DB_PASS: ${DB_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      - flyway-olap
      - metabase-db

  k6:
    image: grafana/k6
    volumes:
      - ./k6-loadtest:/scripts
    entrypoint: "k6 run /scripts/loadtest.js"
    depends_on:
      gateway:
        condition: service_started
      oltp-db:
        condition: service_healthy
      olap-db:
        condition: service_healthy

volumes:
  oltp-data:
  olap-data:
  metabase-data:
  metabase-db-data:
  airflow-data:
